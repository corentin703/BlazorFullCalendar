@inherits CalendarPageBase

@page "/events"

<FullCalendar settings=@settings
              @ref="calendar"
              OnAddEvent="@AddEvent"
              OnUpdateEvent="@UpdateEvent"
              OnClickEvent="@ClickEvent" />

@code {
    public CalendarSettings settings { get; set; }
    FullCalendar calendar;

    public CalendarSourceFeed DefaultSourceFeed { get; set; }
    public CalendarSourceFeed ProjectsSourceFeed { get; set; }
    public CalendarSourceFeed HolidaySourceFeed { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        DefaultSourceFeed = new CalendarSourceFeed()
        {
            url = "/api/Events/50",
            method = "GET"
        };

        ProjectsSourceFeed = new CalendarSourceFeed()
        {
            url = "/api/EventsAllday/10",
            method = "GET"
        };

        var dateFormatHourMinute = new CalendarDateFormatter[] {
            new CalendarDateFormatter()
            {
                hour12 = false,
                hour = "2-digit",
                minute = "2-digit",
                meridiem = "false"
            }
        };
        var dateFormatDayMonth = new CalendarDateFormatter()
        {
            month = "2-digit",
            day = "2-digit",
            weekday = "short"
        };

        settings = new CalendarSettings()
        {
            Plugins = new[] { "timeGrid", "dayGrid", "interaction" },
            InitialView = "timeGrid2Weeks",
            headerToolbar  = new CalendarHeader()
            {
                left = "prev,next today",
                center = "title",
                right = "timeGridDay,timeGrid4Days,timeGridWeek,timeGrid2Weeks,timeGrid4Weeks dayGridMonth,dayGridYear"
            },
            //refetchResourcesOnNavigate = true,
            minTime = new CalendarDurationObject() { hour = 6 },
            maxTime = new CalendarDurationObject() { hour = 24 },
            EventStartEditable = true,
            EventResizableFromStart = true,
            EventDurationEditable = true,
            firstDay = 1,
            locale = "en",
            //editable = true,
            //droppable = true,
            //drop = "BlazorFullCalendar.interop.calendarOnDrop",
            //eventClick = "BlazorFullCalendar.interop.calendarOnEventClick",
            //eventDrop = "BlazorFullCalendar.interop.calendarOnEventResize",
            //eventResize = "BlazorFullCalendar.interop.calendarOnEventResize",
            eventTimeFormat = new CalendarEventTimeFormat() { hour = "2-digit", minute = "2-digit", meridiem = false },
            views = new Dictionary<string, CalendarViewDefinition>()
    {
                { "timeGrid4Days", new CalendarViewDefinition(CalendarPluginTypes.TimeGrid,"4 Days",CalendarDurationObject.Days(4), dateFormatHourMinute, dateFormatDayMonth) { allDaySlot=true, allDayText="Projects"} },
                { "timeGridDay", new CalendarViewDefinition(CalendarPluginTypes.TimeGrid, "1 Day", CalendarDurationObject.Days(1), dateFormatHourMinute, dateFormatDayMonth) { allDaySlot=true, allDayText="Projects"}},
                { "timeGridWeek", new CalendarViewDefinition(CalendarPluginTypes.TimeGrid, "Week", CalendarDurationObject.Weeks(1), dateFormatHourMinute, dateFormatDayMonth) { allDaySlot=true, allDayText="Projects"}},
                { "timeGrid2Weeks", new CalendarViewDefinition(CalendarPluginTypes.TimeGrid, "2 Weeks", CalendarDurationObject.Weeks(2), dateFormatHourMinute, dateFormatDayMonth) { allDaySlot=true, allDayText="Projects"}},
                { "timeGrid4Weeks", new CalendarViewDefinition(CalendarPluginTypes.TimeGrid, "4 Weeks", CalendarDurationObject.Weeks(4), dateFormatHourMinute, dateFormatDayMonth) { allDaySlot=true, allDayText="Projects"}},
                { "dayGridMonth", new CalendarViewDefinition(CalendarPluginTypes.DayGrid, "Month", CalendarDurationObject.Months(1))},
                { "dayGridYear", new CalendarViewDefinition(CalendarPluginTypes.DayGrid, "Year", CalendarDurationObject.Years(1))},
            },
            eventSources = new List<CalendarSourceFeed>()
    {
                DefaultSourceFeed, ProjectsSourceFeed
            },

        };
    }


    protected async Task AddEvent(CalendarEventChangeResponse response)
    {
        Console.WriteLine("AddEvent callback");
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async Task UpdateEvent(CalendarEventChangeResponse response)
    {
        Console.WriteLine("UpdateEvent callback");
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async Task ClickEvent(CalendarEventChangeResponse response)
    {
        Console.WriteLine("ClickEvent callback");
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async Task Change(object args, string field = "")
    {
        Console.WriteLine("Change callback");
        await calendar.CalendarRefetchEvents();
        await InvokeAsync(() => { StateHasChanged(); });
    }
}
